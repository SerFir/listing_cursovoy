Исходный код программы
Класс Game
package com.game.src.main;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.LinkedList;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import com.game.src.main.classes.EntityA;
import com.game.src.main.classes.EntityB;

import javax.swing.JFrame;

public class Game extends Canvas implements Runnable  {

    public static final long serialVersionUID = 1L;
    public static final int WIDHT = 320;// ширина окна final - потому что он не может изменится
    public static final int HEIGHT = WIDHT / 12 * 9;
    public static final int SCALE = 2;//коэфициент масштабирования
    public final String TITLE = "N R T";

    private boolean running = false;
    private Thread thread; //новый поток

    private boolean eventFinish;
    private BufferedImage image = new BufferedImage(WIDHT, HEIGHT, BufferedImage.TYPE_INT_RGB);
    private BufferedImage spriteSheet = null;
    private BufferedImage background = null;

    private boolean is_shooting = false;//если убрать это и еще в кейпресд то можно стрелять с зажатым пробелом

    private static int enemy_count = 3;//счетчик врагов
    private int enemy_killed = 0;

 private static Player p;
    private static Controller c;
    private static Textures tex;
    private Menu menu;
/////////////////////////
    private static long time;
///////////////////////////
    public LinkedList<EntityA> ea;
    public LinkedList<EntityB> eb;

    public static int HEALTH = 150;

    public static enum STATE{
        MENU,
        GAME,
        GAMEOVER
    };

///////////////////////////////////////////
    //CHASI
    public String getTimeToString() {

        int minutes = (int) (time / 3600);
        int seconds = (int) ((time % 3600) / 60);
        return seconds < 10 ? minutes + ":0" + seconds : minutes + ":" + seconds;
    }

    public long getTime() {

        return time;
    }

    public void setTime(long t) {

        time = t;
    }

//////////////////////////////////////////


    public static STATE State = STATE.MENU;

    public void init(){

        //////////////////////////
        setTime(getTime());

        ////////////////////
        requestFocus();//до того как это было написано чтобы начать упавлять нужно было щелкуныуть по окну мышкой
        BufferImageLoader loader = new BufferImageLoader();
        try{
            spriteSheet = loader.loadImage("/sprite_sheet.png");
            background = loader.loadImage("/background.png"); // 700x500 background
        }catch(IOException e){
            e.printStackTrace();
        }

        tex = new Textures(this);
        c = new Controller(tex, this);
        p = new Player(200, 200, tex, this, c);

        menu = new Menu();


        ea = c.getEntityA();
        eb = c.getEntityB();

        this.addKeyListener(new KeyInput(this));
        this.addMouseListener(new MouseInput());

        c.createEnemy(enemy_count);
    }





    private synchronized void start(){
        if(running)
            return;

        running = true;
        thread = new Thread(this);
        thread.start();
    }

    private synchronized void stop(){
        if(!running)
            return;
        try {
            thread.join();
        } catch (InterruptedException e/*ex*/) {
            // Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
            e.printStackTrace();
        }
        System.exit(1);
    }

    public void run(){// этод метод вызавыется когда срабатывает Runnable это "сеpдце игры"
           init();
        long lastTime = System.nanoTime();// наносекунды
        final double amountOfTicks = 60.0;// FPS = 60
        double ns = 1000000000 / amountOfTicks;
        double delta = 0;
        int updates = 0;
        int frames = 0;
        long timer = System.currentTimeMillis();

        while(running){
            //это игровой цикл
            long now = System.nanoTime();
            delta += (now - lastTime) / ns;
            lastTime = now;
            if(delta >= 1){
                ////////////////
                time++;// счет таймера
                //////////////////////
                tick();
                updates++;
                delta--;
            }

            render();
            frames++;

            if(System.currentTimeMillis() - timer > 1000){
                timer += 1000;
                System.out.println(updates + " Ticks, fps" + frames);
                updates = 0;//эти две строчки для того чтобы FPS сбрасывался до 60 иначе н увеличивается на 60
                frames = 0;
            }
        }
        stop();
    }

    private void tick(){
        if(State == STATE.GAME){
            p.tick();
            c.tick();
        }
        if(enemy_killed >= enemy_count){
            enemy_count += 1;
            enemy_killed = 0;
            c.createEnemy(enemy_count);//создает врагов когда предидущие убиты
        }

    }

    private void render(){

        BufferStrategy bs = this.getBufferStrategy();
        if(bs == null){

            createBufferStrategy(3);
            return;
        }
        Graphics g = bs.getDrawGraphics();
        /////////////////////////////////

        g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
        g.drawImage(background, 0, 0, null);

        if(State == STATE.GAME){
            p.render(g);
            c.render(g);
/////////////////////////////////
            g.setColor(java.awt.Color.WHITE);
            g.drawString(getTimeToString(), 600, 20);

////////////////////////////////////

            g.setColor(Color.gray);
            g.fillRect(5, 5, 150, 25);//длина полосы здоровья

            g.setColor(Color.yellow);
            g.fillRect(5, 5, HEALTH, 25);

            g.setColor(Color.white);
            g.drawRect(5, 5, 150, 25);


        }else if(State == STATE.MENU){
                //menu = new Menu();
                menu.render(g);
        }

        ////////////////////////////////
        g.dispose();
        bs.show();
    }

    public void keyPressed(KeyEvent e){
        int key = e.getKeyCode();

        if(State == STATE.GAME){
            if(key == KeyEvent.VK_RIGHT){
                p.setVelX(5);
            }else if(key == KeyEvent.VK_LEFT){
                p.setVelX(-5);
            }else if(key == KeyEvent.VK_DOWN){
                p.setVelY(5);
            }else if(key == KeyEvent.VK_UP){
                p.setVelY(-5);
            }else if(key == KeyEvent.VK_SPACE && !is_shooting){//убрать && !is_shooting
                is_shooting = true;//убрать и ниже тоже
                c.addEntity(new Bullet(p.getX(), p.getY(), tex, this));
            }
        }
    }

    public void keyReleased(KeyEvent e){
        int key = e.getKeyCode();

        if(key == KeyEvent.VK_RIGHT){
            p.setVelX(0);
        }else if(key == KeyEvent.VK_LEFT){
            p.setVelX(0);
        }else if(key == KeyEvent.VK_DOWN){
            p.setVelY(0);
        }else if(key == KeyEvent.VK_UP){
            p.setVelY(0);
        }else if(key == KeyEvent.VK_SPACE){
            is_shooting = false;//убрать
        }
    }

    public static void main(String args[]){
        Game game = new Game();
        game.setPreferredSize(new Dimension(WIDHT * SCALE, HEIGHT * SCALE));
        game.setMaximumSize(new Dimension(WIDHT * SCALE, HEIGHT * SCALE));
        game.setMinimumSize(new Dimension(WIDHT * SCALE, HEIGHT * SCALE));

        JFrame frame = new JFrame(game.TITLE);
        frame.add(game);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        game.start();
    }

    public void update() {
        if(eventFinish) eventFinish();
        }


   public static void eventFinish() {


        if(HEALTH == 0) {

        HEALTH=150;

        enemy_count = 3;
        time=0;
        State=STATE.MENU;

        }

    }


    public BufferedImage getSpriteSheet(){
        return spriteSheet;
    }

    public int getEnemy_count(){
        return enemy_count;
    }

    public int getEnemy_killed(){
        return enemy_killed;
    }

    public void setEnemy_count(int enemy_count){
        this.enemy_count = enemy_count;
    }

    public void setEnemy_killed(int enemy_killed){
        this.enemy_killed = enemy_killed;
    }
}

Класс Enemy
package com.game.src.main;

import com.game.src.main.classes.EntityA;
import com.game.src.main.classes.EntityB;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.Random;

public class Enemy extends GameObject implements EntityB {

    private Textures tex;
    Random r = new Random();
    private Game game;
    private Controller c;

    private int speed = r.nextInt(3)+ 1;


    public Enemy(double x, double y, Textures tex, Controller c, Game game){
        super(x,y);
        this.tex = tex;
        this.c = c;
        this.game = game;
    }

    public void tick(){
        y += speed;// скорость врагов

        if(y > (Game.HEIGHT * Game.SCALE)){
            speed = r.nextInt(3)+ 1; //какие то изменения по скорости
            x = r.nextInt(610);//область генерации врагов еще есть в контроллере 31 строка
            y = -10;
        }

        for(int i = 0; i < game.ea.size(); i++){
            EntityA tempEnt = game.ea.get(i);
            if(Physics.Collision(this, tempEnt)){
                c.removeEntity(tempEnt);//удаляет пулю котороя попала в цель
                c.removeEntity(this);
                game.setEnemy_killed(game.getEnemy_killed() + 1);
            }
        }



    }

    public void render(Graphics g){
        g.drawImage(tex.enemy,(int)x, (int)y, null);
    }

    public Rectangle getBounds(){
        return new Rectangle((int)x, (int)y, 32, 32);
    }

    public double getY(){
        return y;
    }

    public double getX(){
        return x;
    }


} 

Класс Controller

package com.game.src.main;

import com.game.src.main.classes.EntityA;
import com.game.src.main.classes.EntityB;

import java.awt.Graphics;
import java.util.LinkedList;
import java.util.Random;

public class Controller {

    private LinkedList<EntityA> ea = new LinkedList<EntityA>();
    private LinkedList<EntityB> eb = new LinkedList<EntityB>();

    EntityA enta;
    EntityB entb;
    Textures tex;
    Random r = new Random();

    private Game game;

    public Controller(Textures tex, Game game){
        this.tex = tex;
        this.game = game;

    }
    //генерируем наших врагов
    public void createEnemy(int enemy_count){
        for(int i = 0; i < enemy_count; i++){
            addEntity(new Enemy(r.nextInt(610), -10, tex, this, game));//обл генерации врагов
        }
    }

    public void tick(){
        // A CLASS
        for(int i = 0; i < ea.size(); i++){
            enta = ea.get(i);
            enta.tick();
        }

        // B CLASS
        for(int i = 0; i < eb.size(); i++){
            entb = eb.get(i);

           entb.tick();
        }
    }

    public void render(Graphics g){
        // A CLASS
        for(int i = 0; i < ea.size(); i++){
            enta = ea.get(i);

            enta.render(g);
        }

        // B CLASS
        for(int i = 0; i < eb.size(); i++){
            entb = eb.get(i);

            entb.render(g);
        }
    }

    public void addEntity(EntityA block){

        ea.add(block);
    }
    public void removeEntity(EntityA block){
        ea.remove(block);
    }

    public void addEntity(EntityB block)
    {
        eb.add(block);
    }
    public void removeEntity(EntityB block){
        eb.remove(block);
    }

    public LinkedList<EntityA> getEntityA(){

        return ea;
    }

    public LinkedList<EntityB> getEntityB(){
        return eb;
    }

}

Класс Bullet
package com.game.src.main;

import java.awt.Graphics;
import java.awt.Rectangle;

import com.game.src.main.classes.EntityA;


public class Bullet extends GameObject implements EntityA{

    private Textures tex;
    private Game game;

    public Bullet(double x, double y, Textures tex, Game game){
        super(x,y);
        this.tex = tex;
        this.game = game;
    }

    public void tick(){
        y -= 10;


    }

    public Rectangle getBounds(){
        return new Rectangle((int)x, (int)y, 32, 32);
    }

    public void render(Graphics g){
        g.drawImage(tex.missile, (int)x, (int) y, null);
    }

    public double getY(){
        return y;
    }

    public double getX(){
        return x;
    }
}

Класс BufferImageLoader
package com.game.src.main;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;


public class BufferImageLoader {

    private BufferedImage image;
    private double dx;
    private double dy;

    public BufferedImage loadImage(String path) throws IOException{
        image = ImageIO.read(getClass().getResource(path));
        return image;
    }

//    public void update() {
//    }

//    public void draw(Graphics2D g) {
//    }

//    public void setVector(double dx, double dy) {
//        this.dx = dx;
//        this.dy = dy;
//    }
} 

Класс KeyInput

package com.game.src.main;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class KeyInput extends KeyAdapter{

    Game game;

    public KeyInput(Game game){

        this.game = game;
    }

    public void keyPressed(KeyEvent e){

        game.keyPressed(e);
    }

    public void keyReleased(KeyEvent e){

        game.keyReleased(e);
    }

} 

Класс GameObject
package com.game.src.main;

import java.awt.Rectangle;

public class GameObject {

    public double x, y;

    public GameObject(double x, double y){
        this.x = x;
        this.y = y;
    }

    public Rectangle getBounds(int width, int hieght){
        return new Rectangle((int)x, (int)y, width, hieght);
    }
} 

Класс Menu
package com.game.src.main;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;

public class Menu {

    public Rectangle playButton = new Rectangle(Game.WIDHT / 2 + 120, 150, 100, 50);

    public Rectangle quitButton = new Rectangle(Game.WIDHT / 2 + 120, 250, 100, 50);
    public static final int WIDHT = 320;// ширина окна final - потому что он не может изменится
    public static final int HEIGHT = WIDHT / 12 * 9;

    public void render(Graphics g){
        Graphics2D g2d = (Graphics2D) g;



        Font fnt0 = new Font("impact", Font.PLAIN, 50);
        g.setFont(fnt0);
        g.setColor(Color.yellow);
        g.drawString("N R T", Game.WIDTH / 2 + 280 , 100);

        Font fnt1 = new Font("arial", Font.BOLD, 30);
        g.setFont(fnt1);
        g.drawString("PLAY", playButton.x + 12, playButton.y + 37);
        g2d.draw(playButton);

        g.drawString("QUIT", quitButton.x + 12, quitButton.y + 37);
        g2d.draw(quitButton);
    }
}

Класс MouseInput
package com.game.src.main;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

public class MouseInput implements MouseListener{


    public void mouseClicked(MouseEvent e) {

    }


    public void mousePressed(MouseEvent e) {

        int mx = e.getX();
        int my = e.getY();



        //play button
        if(mx > Game.WIDTH / 2 + 280 && mx <= Game.WIDTH / 2 + 380){
            if(my >= 150 && my <= 200){
                //нажатие кнопки play
                Game.State = Game.STATE.GAME;
            }
        }

        //quit button
        if(mx > Game.WIDTH / 2 + 280 && mx <= Game.WIDTH / 2 + 380){
            if(my >= 250 && my <= 300){
                //нажатие кнопки quit
                System.exit(1);
            }
        }

    }


    public void mouseReleased(MouseEvent e) {

    }


    public void mouseEntered(MouseEvent e) {

    }


    public void mouseExited(MouseEvent e) {

    }
}

Класс Physics
package com.game.src.main;

import java.util.LinkedList;

import com.game.src.main.classes.EntityA;
import com.game.src.main.classes.EntityB;

    public class Physics {

    public static boolean Collision(EntityA enta, EntityB entb){
        // проверка на столкновения
        if(enta.getBounds().intersects(entb.getBounds())){
            return true;
        }
        return false;
    }

    public static boolean Collision(EntityB entb, EntityA enta){
        // проверка на столкновения
        if(entb.getBounds().intersects(enta.getBounds())){
            return true;
        }
        return false;
    }

} 

Класс Player
package com.game.src.main;

import java.awt.Graphics;
import java.awt.Rectangle;

import com.game.src.main.classes.EntityA;
import com.game.src.main.classes.EntityB;

public class Player extends GameObject implements EntityA{

    //переменные для улчшения управления(отклик сробатывает быстрее)
    private double velX = 0;
    private double velY = 0;
    private Textures tex;

    Game game;
    Controller controller;

    public Player(double x, double y, Textures tex, Game game, Controller controller){
        super(x,y);
        this.tex = tex;
        this.game = game;
        this.controller = controller;
    }

    public void tick(){
        x+=velX;
        y+=velY;
        //чтобы не вылетал за пределы экрана
        if(x <= 0)
            x = 0;
        if(x >= 625 - 16)
            x = 625 - 16;
        if(y <= 0)
            y = 0;
        if(y >= 470 - 32)
            y = 470 - 32;

        for(int i = 0; i < game.eb.size(); i++){
            EntityB tempEnt = game.eb.get(i);

            if(Physics.Collision(this, tempEnt)){
                controller.removeEntity(tempEnt);
                Game.HEALTH -= 50;
                if (Game.HEALTH==0){
                    Game.eventFinish();
                }
                game.setEnemy_killed(game.getEnemy_killed() + 1);////////////////////////
            }
        }

    }

    public Rectangle getBounds(){

        return new Rectangle((int)x, (int)y, 32, 32);
    }

    public void render(Graphics g){

        g.drawImage(tex.player, (int)x, (int)y, null);
    }

    public double getX(){

        return x;
    }

    public double getY(){

        return y;
    }

    public void setX(double x){

        this.x = x;
    }

    public void setY(double y){

        this.y = y;
    }

    public void setVelX(double velX){

        this.velX = velX;
    }

    public void setVelY(double velY){

        this.velY = velY;
    }

}

          Класс SpriteSheet
package com.game.src.main;

import java.awt.image.BufferedImage;

public class SpriteSheet {
    private BufferedImage image;

    public SpriteSheet(BufferedImage image){
        this.image = image;
    }

    public BufferedImage grabImage(int col, int row, int width, int height){
        BufferedImage img = image.getSubimage((col * 32) - 32, (row * 32) - 32, width, height);
        return img;
    }
}

Класс Textures

package com.game.src.main;

import java.awt.image.BufferedImage;


public class Textures {

    public BufferedImage player, missile, enemy;

    private SpriteSheet ss;

    public Textures(Game game){
        ss = new SpriteSheet(game.getSpriteSheet());

        getTextures();
    }

    private void getTextures(){
        player = ss.grabImage(1, 1, 32, 32);
        missile = ss.grabImage(2, 1, 32, 32);
        enemy = ss.grabImage(3, 1, 32, 32);
    }

}

Интерфейс EntityA

package com.game.src.main.classes;

import java.awt.Graphics;
import java.awt.Rectangle;

public interface EntityA {

    public void tick();
    public void render(Graphics g);
    public Rectangle getBounds();

    public double getX();
    public double getY();
}
Интерфейс EntityB

package com.game.src.main.classes;

import java.awt.Graphics;
import java.awt.Rectangle;

public interface EntityB {

    public void tick();
    public void render(Graphics g);
    public Rectangle getBounds();

    public double getX();
    public double getY();
}
 
